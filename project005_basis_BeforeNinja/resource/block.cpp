//============================================================
//
//	ブロック処理 [block.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "block.h"
#include "manager.h"
#include "renderer.h"
#include "texture.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char* TEXTURE_FILE[] =	// テクスチャファイル
	{
		"data\\TEXTURE\\grid000.png",	// 通常地面
		"data\\TEXTURE\\grid001.png",	// 壁判定
		"data\\TEXTURE\\grid002.png",	// スタート/ゴール
	};
	const int PRIORITY = 3;	// ブロックの優先順位
}

//************************************************************
//	スタティックアサート
//************************************************************
static_assert(NUM_ARRAY(TEXTURE_FILE) == CBlock::TYPE_MAX, "ERROR : Texture Count Mismatch");

//************************************************************
//	子クラス [CBlock] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBlock::CBlock() : CObject3D(CObject::LABEL_BLOCK, CObject::DIM_3D, PRIORITY),
	m_type	(TYPE_FIELD)	// 種類
{

}

//============================================================
//	デストラクタ
//============================================================
CBlock::~CBlock()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBlock::Init(void)
{
	// メンバ変数を初期化
	m_type = TYPE_FIELD;	// 種類

	// オブジェクト3Dの初期化
	if (FAILED(CObject3D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBlock::Uninit(void)
{
	// オブジェクト3Dの終了
	CObject3D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBlock::Update(const float fDeltaTime)
{
	// オブジェクト3Dの更新
	CObject3D::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CBlock::Draw(CShader *pShader)
{
	// オブジェクト3Dの描画
	CObject3D::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CBlock *CBlock::Create
(
	const EType type,			// 種類
	const D3DXVECTOR3& rPos,	// 位置
	const D3DXVECTOR3& rSize	// 大きさ
)
{
	// ブロックの生成
	CBlock *pBlock = new CBlock;
	if (pBlock == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ブロックの初期化
		if (FAILED(pBlock->Init()))
		{ // 初期化に失敗した場合

			// ブロックの破棄
			SAFE_DELETE(pBlock);
			return nullptr;
		}

		// 種類を設定
		pBlock->SetType(type);

		// 位置を設定
		pBlock->SetVec3Position(rPos);

		// 大きさを設定
		pBlock->SetVec3Sizing(rSize);

		// 確保したアドレスを返す
		return pBlock;
	}
}

//============================================================
//	種類の設定処理
//============================================================
void CBlock::SetType(const EType type)
{
	// テクスチャを割当
	BindTexture(GET_MANAGER->GetTexture()->Regist(TEXTURE_FILE[type]));

	// 種類を設定
	m_type = type;
}
